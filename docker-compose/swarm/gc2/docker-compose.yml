# This is for running GC2 in a Docker Swarm at AWS
# All volumes must shared. Here is Cloudstor used.
# No PostgreSQL. Run and scale that on AWS RDS.
#
# Use Traefik as reverse-proxy:
# Create a overlay network:
# docker network create --driver overlay traefik-net
#
# Remember to change traefik.frontend.rule
# Remember to change the email in traefik.toml

version: '3'

networks:
  traefik-net:
    external: true
  internal:
    external: false

services:

  gc2core:
    image: mapcentia/gc2core
    privileged: true
    volumes:
      - gc2core_var_www_geocloud2:/var/www/geocloud2
      - gc2core_var_log:/var/log
      - gc2core_var_lib_php_sessions:/var/lib/php/sessions    
    env_file:
      - gc2.env
    deploy:
     labels:
      - traefik.backend=swarm.gc2.io
      - traefik.frontend.rule=Host:gc2.io # SET HOST
      - traefik.port=80
      - traefik.backend.loadbalancer.swarm=true
      - traefik.docker.network=traefik-net
      - traefik.frontend.passHostHeader=true
    networks:
      - internal
      - traefik-net

  mapcache:
    image: mapcentia/mapcache
    networks:
      - internal
    volumes:
      - gc2core_var_www_geocloud2:/var/www/geocloud2
      - mapcache_etc_apache2_sites-enabled:/etc/apache2/sites-enabled

  postgis:
    image: mapcentia/postgis
    volumes:
      - postgis_var_www_geocloud2:/var/www/geocloud2
      - postgis_var_lib_postgresql:/var/lib/postgresql
      - postgis_var_log:/var/log
      - postgis_etc_postgresql:/etc/postgresql
      - postgis_etc_pgbouncer:/etc/pgbouncer
    env_file:
      - gc2.env
    networks:
      - internal

volumes:
    # gc2core
    gc2core_var_www_geocloud2:
      driver: cloudstor:aws
            driver_opts:
              backing: shared
    gc2core_var_log:
      driver: cloudstor:aws
            driver_opts:
              backing: shared
    gc2core_var_lib_php_sessions:
      driver: cloudstor:aws
            driver_opts:
              backing: shared

    # mapcache
    mapcache_etc_apache2_sites-enabled:
      driver: cloudstor:aws
            driver_opts:
              backing: shared

    # postgis
    postgis_var_log:
      driver: cloudstor:aws
            driver_opts:
              backing: shared
    postgis_var_www_geocloud2:
      driver: cloudstor:aws
            driver_opts:
              backing: shared
    postgis_etc_postgresql:
      driver: cloudstor:aws
            driver_opts:
              backing: shared
    postgis_var_lib_postgresql:
      driver: cloudstor:aws
            driver_opts:
              backing: shared
    postgis_etc_pgbouncer:
      driver: cloudstor:aws
            driver_opts:
              backing: shared
